[include nozzle-scrub.cfg]
#####################################################################
#   Macros
#####################################################################

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    {% set bed_position = params.BED_POSITION|default('None') %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}

    _CheckProbe action=query
        G90
    Attach_Probe
    _KLICKY_STATUS_LEVELING

    {% if bed_position != 'None' %}
      BASE_CALIBRATE_Z BED_POSITION={bed_position}
    {% else %}
      BASE_CALIBRATE_Z
    {% endif %}
     Dock_Probe

#--------------------------------------------------------------------
### QOL Macros
#--------------------------------------------------------------------
[gcode_macro PRIME_NOZZLE]
gcode:
    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
    M117 Priming
    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0
    ; Move to start of line.
    G1 Z10 F900
    G1 Y10 X10 F18000
    G1 Z0.2 F900
    ; Print the line.
    G91                ; Relative coordinates.
    G1 X103 E20 F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
    G1 Y-2 F1000
    G1 X-60 E7 F1000    ; Print second part of the line.
    G1 E-0.8 F3000      ; Retract to avoid stringing.
    G1 X0.5 E0 F1000    ; Wipe back to break string.
    G1 X-5.5 E0 F1000   ; Wipe forward to break string.
    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
    M117 Primed

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL
  LED_PAUSED

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
  LED_PRINTING



[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

#--------------------------------------------------------------------
### Workflow Macros
#--------------------------------------------------------------------

[gcode_macro PARK]
gcode:
  {% set z_max = printer.toolhead.axis_maximum.z %}
  {% set z_pos = printer.toolhead.position.z %}
  {% set park_height = 100 %}
  {% if z_pos > (z_max - 10) %}
    M117 Z {z_pos} Cant raise
  {% elif z_pos > park_height + 0.04 %}
    M117 Z {z_pos} goto { (( z_max - 10 - z_pos) * 0.5 ) + z_pos }
    G1 Z { (( z_max - 10 - z_pos) * 0.5 ) + z_pos } F600
  {% elif z_pos < park_height %}
    M117 Z {z_pos} goto {park_height}
    G1 Z {park_height} F600
  {% else %}
    M117 I think we are already parked
  {% endif %}
  _PARKXY

[gcode_macro _PARKXY]
gcode:
  {% set Y_MAX = printer.toolhead.axis_maximum.y %}
  {% set X_MAX = printer.toolhead.axis_maximum.x %}
  G1 Y {Y_MAX - 2} X {X_MAX - 2} F3000

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  G0 X200 Y200 Z100 # Go to a nice place :D
  PUBLISH_ALERT PAYLOAD=print_cancelled
  M106 S0	# Disable fans
  M140 S110	# We rarely want the bed cool lol
  M104 S240   # Same with the hotend
  M117 Ready
  CANCEL_PRINT_BASE

[gcode_macro G32]
gcode:
    M117 Levelling...
    LED_PROBING
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X175 Y175 Z30 F3600
    
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIG
gcode:
     M401
     BED_MESH_CALIBRATE_ORIG
     M402

[gcode_macro PRINT_START]
gcode:
    # Start bed heating and continue
    {% if "BED" in params %}
    	{% set BED_TEMP = params.BED|default(110)|float %}
    {% elif "material_bed_temperature_layer_0" in params %}
    	{% set BED_TEMP = params.material_bed_temperature_layer_0|default(110)|float %}
    {% else %}
    	{% set BED_TEMP = params.BED_TEMP|default(110)|float %}
    {% endif %}


    {% if "HOTEND" in params %}
    	{% set EXTRUDER_TEMP = params.HOTEND|default(245)|float %}    
    {% elif "material_print_temperature_layer_0" in params %}
        {% set EXTRUDER_TEMP = params.material_print_temperature_layer_0|default(245)|float %}
    {% else %}
        {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
    {% endif %}

    M140 S{BED_TEMP}                                                       ; Set bed temperature
    M104 S{EXTRUDER_TEMP}                                                  ; Set nozzle temperature
    
    {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}      ; Home all axes
    
    M109 S{EXTRUDER_TEMP}                                                  ; Wait for nozzle to reach temperature
    M190 S{BED_TEMP}                                                       ; Wait for bed to reach temperature

    Attach_Probe_Lock
    BED_MESH_CLEAR
    
    QUAD_GANTRY_LEVEL
    CALIBRATE_Z
    Dock_Probe_Unlock
    SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1

    PURGE_CLEAN

    PRIME_NOZZLE
    G92 E0
    LED_PRINTING
    PUBLISH_ALERT PAYLOAD=print_started

[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    TURN_OFF_HEATERS
    M107                                     ; turn off fan
    PARK
    PUBLISH_ALERT PAYLOAD=print_ended
    LED_IDLE

## For KlipperScreen
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(500) %}
    G91
    G1 E50 F{speed}
    G1 E50 F{speed}
    G92

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(500) %}
    G91
    G1 E-50 F{speed}
    G1 E-50 F{speed}
    G92


[gcode_macro PURGE_CLEAN]
gcode:
      SAVE_GCODE_STATE NAME=PRE_CHANGE_STATE 
      {action_respond_info("Cleaning toolhead")}
      CLEAN_NOZZLE PURGE=1
      
      RESTORE_GCODE_STATE NAME=PRE_CHANGE_STATE MOVE=1
      G92 E0
      G1 E-1.0 F1500.0
      G90

#--------------------------------------------------------------------
### Tuning Macros
#--------------------------------------------------------------------
[gcode_macro CHECK_ACCEL]
variable_accel_output: 0
gcode:
  ACCELEROMETER_QUERY

[gcode_macro TUNE_INPUT_SHAPING]
gcode:
  G28 XYZ
  SHAPER_CALIBRATE

[gcode_macro PUBLISH_ALERT]
gcode:
  {% set data = params.PAYLOAD|default(None) %}
  {action_call_remote_method("publish_mqtt_topic",
                             topic="klipper/alert",
                             payload=data,
                             qos=0,
                             retain=False,
                             use_prefix=True)}

